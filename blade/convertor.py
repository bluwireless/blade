# Copyright (C) 2019 Blu Wireless Ltd.
# All Rights Reserved.
#
# This file is part of BLADE.
#
# BLADE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# BLADE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# BLADE.  If not, see <https://www.gnu.org/licenses/>.
#

import logging

# Setup logging
logger = logging.getLogger(__name__)

# Import the different convertors
from .convert.reg2his import convert_config_to_his
from .convert.reg2mod import convert_config_to_mod

# Import Phhidle YAML schema types
from .schema import Config, Group

# Map tag types to conversion functions
# NOTE: Multiple convertors can be specified for one tag
convertors = {
    Config.__name__: [
        convert_config_to_his,  # Convert !Config to a !His signal bundle for each !Group
        convert_config_to_mod,  # Convert !Config to a !Mod register decoder
    ],
}

def convert(ph_doc, all_docs):
    """ Map attributes from one tag type into another (e.g. register to interconnect)

    Perform conversions of the Phhidle YAML schema object. Depending on the object
    type, different conversion pathways may be taken. Conversion results are
    attached to the original object, and returned so that they can be included in
    the global scope.

    Args:
        ph_doc  : The Phhidle document to convert
        all_docs: A list of all known Phhidle YAML documents

    Returns:
        list: All documents generated by converters
    """
    # Determine if we have a suitable convertor
    type_id = type(ph_doc).__name__
    if type_id not in convertors:
        return []

    # Work through the list of conversions to perform, accumulating the results
    results = []
    for conversion in convertors[type_id]:
        results += conversion(ph_doc, all_docs)

    # Attach all of the results onto the original object
    for result in results:
        ph_doc.add_conversion(result)

    # Return all resultant documents to be included in the global scope
    return results
